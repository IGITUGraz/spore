#include "test_circular_buffer.h"

#include <iostream>
#include <stdexcept>
#include <string>
#include <vector>

#include "circular_buffer.h"

namespace spore
{

/**
 * Constructor.
 */
TestCircularBuffer::TestCircularBuffer()
:SporeTestBase("test_circular_buffer")
{}

/**
 * Execute once at startup.
 */
void TestCircularBuffer::init()
{
    const double target_data[][51] = {
        { 0,  0,  0,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 
        { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 
        { 2,  2,  2,  2,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1 }, 
        { 1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0, -1 }, 
        { 2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1, -1 }, 
        { 3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2, -1 }, 
        { 4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3, -1 }, 
        { 5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4, -1 }, 
        { 6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5, -1 }, 
        { 7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6, -1 }, 
        { 8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7, -1 }, 
        { 9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8, -1 }, 
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1 }, 
        { 1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0, -1 }, 
        { 2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1, -1 }, 
        { 3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2, -1 }, 
        { 4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3, -1 }, 
        { 5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4, -1 }, 
        { 9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0, -1 }, 
        { 0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1, -1 }, 
        { 1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2, -1 }, 
        { 2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3, -1 }, 
        { 3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4, -1 }, 
        { 4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5, -1 },
        { 5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6, -1 },
        { 6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7, -1 }, 
        { 7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8, -1 }, 
        { 8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9, -1 }, 
        { 9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0, -1 }, 
        { 0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1, -1 }, 
        { 1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2, -1 }, 
        { 2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3, -1 }, 
        { 3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  9,  8,  7,  6,  5,  4, -1 }, 
        { 1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0, -1 } };

    
    CircularBuffer<double> cb;
    
    cb.resize(5, 0);
    
    test_assert(cb.size()==5, "CircularBuffer test size 0");

    for (int i=0; i<cb.size(); i++)
        test_assert( cb[i] == target_data[0][i], "CircularBuffer test content 0" );

    cb.resize(10, 1);
    
    test_assert(cb.size()==10, "CircularBuffer test size 1");

    for (int i=0; i<cb.size(); i++)
        test_assert( cb[i] == target_data[1][i], "CircularBuffer test content 1" );

    for (int i=0; i<4; i++)
        cb[i] = 2;
    
    for (int i=0; i<cb.size(); i++)
        test_assert( cb[i] == target_data[2][i], "CircularBuffer test content 2" );

    for (int i=0; i<cb.size(); i++)
        cb[i] = i;
    
    for (int i=0; i<cb.size(); i++)
        test_assert( cb[i] == target_data[3][i], "CircularBuffer test content 3" );

    for (int i=0; i<(5*cb.size()); i++)
        test_assert( cb[i] == target_data[4][i], "CircularBuffer test content 4" );

    for (int j=0;j<15;j++)
    {
        CircularBuffer<double>::const_iterator it = cb.get(j);

        for (int i=0; i<(5*cb.size()); i++)
            test_assert( *(++it) == target_data[5+j][i], "CircularBuffer test content 5" );
    }
    
    for (int j=0;j<15;j++)
    {
        CircularBuffer<double>::const_iterator it = cb.get(j);
        
        for (int i=0; i<(5*cb.size()); i++)
            test_assert( *(--it) == target_data[20+j][i], "CircularBuffer test content 20" );
    }
    
    std::vector< CircularBuffer<double> > traces;
    
    traces.resize(1);
    
    traces[0].resize(10,1);
    
    for (int i=0; i<cb.size(); i++)
        traces[0][i] = i;
    
    CircularBuffer<double>::const_iterator it2 = traces[0].get(10);
    
    for (int i=0; i<(5*traces[0].size()); i++)
        test_assert( *(++it2) == target_data[35][i], "CircularBuffer test content 35" );
}

}

